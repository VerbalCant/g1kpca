params {
    // Input parameters
    thousand_genomes_vcf = "/references/1000genomes/ALL.chr{chr}.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
    ancient_vcfs_tsv = "ancient_vcfs.tsv"
    ped_file = "20130606_g1k.ped"
    
    // Output parameters
    outdir = 'results'
    timing_report = "${params.outdir}/timing_report.txt"
    
    // Analysis parameters
    min_maf = 0.01
    max_missing = 0.1
    ld_window_size = '50'
    ld_step_size = '10'
    ld_r2_threshold = '0.2'
    max_cpus = 16
    chromosomes = "1"  // Default to chr1, can be specified as "1,2,3" or "1-22"
    min_variants = 50
    max_missing_rate = 0.1
    min_samples = 1
    
    // ADMIXTURE parameters
    admixture_k_min = 2
    admixture_k_max = 5
    admixture_cv = true  // Enable cross-validation
    admixture_threads = 16
    run_admixture = false  // Default to false
} 

process {
    // Default resources for all processes
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(8.GB * task.attempt, 'memory') }
    time = { check_max(4.h * task.attempt, 'time') }

    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    // Process-specific resources
    withLabel: high_cpu {
        cpus = { check_max(8 * task.attempt, 'cpus') }
        memory = { check_max(16.GB * task.attempt, 'memory') }
        time = { check_max(8.h * task.attempt, 'time') }
    }

    withLabel: high_memory {
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = { check_max(32.GB * task.attempt, 'memory') }
        time = { check_max(8.h * task.attempt, 'time') }
    }
}

// Function to ensure that resource requirements don't exceed max available resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Default parameters
params {
    max_memory = 64.GB
    max_cpus = 16
    max_time = 24.h
} 